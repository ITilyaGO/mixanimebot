import asyncio
import random
import requests
import os
import json
import logging
from datetime import datetime
from io import BytesIO
from PIL import Image
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage  
from aiogram.filters import Command
from aiogram import F
import re
from database import init_db, add_user, add_stat, get_user_stats, get_all_user_stats, get_user_permission, add_user_permission

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
CONFIG_FILE = "config.json"

with open(CONFIG_FILE, "r", encoding="utf-8") as file:
    config = json.load(file)

TOKEN = config["token"]
API_URL = config["api_url"]
MAX_RETRIES = config["max_retries"]
VIDEO_TITLES_FILE = config["video_titles_file"]
DEBUG_MODE = config["debug"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_DIR = "log"
os.makedirs(LOG_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOG_DIR, f"log-{datetime.now().strftime('%Y-%m-%d')}.log")

logger = logging.getLogger()
logger.setLevel(logging.DEBUG if DEBUG_MODE else logging.INFO)

file_handler = logging.FileHandler(LOG_FILE, encoding="utf-8")
file_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))

if logger.hasHandlers():
    logger.handlers.clear()

logger.addHandler(file_handler)
logger.addHandler(console_handler)

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ê–Ω–∏–º–µ")]],
    resize_keyboard=True
)

pending_codes = {}
def has_permission(user_id, command):
    return get_user_permission(user_id, command)

def escape_markdown(text: str) -> str:
    special_chars = r"[_*`~\[\](){}#+.!-]"
    return re.sub(f"({special_chars})", r"\\\1", text)

def is_missing_image(image_url):
    return "/assets/globals/missing_original.jpg" in image_url

async def fetch_data():
    try:
        headers = {
            "User-Agent": "Mozilla/5.0"
        }
        
        for attempt in range(MAX_RETRIES):
            random_page = random.randint(1, 5900)
            url = API_URL.format(page=random_page)
            logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫ Shikimori: {url}")
            
            anime_response = requests.get(url, headers=headers)
            anime_data = anime_response.json()
            if not anime_data:
                logger.debug("–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ")
                return None, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", ""

            random_anime = anime_data[0]
            image_url = f"https://shikimori.one{random_anime['image']['original']}"
            anime_title = random_anime['russian']
            anime_url = f"https://shikimori.one{random_anime['url']}"

            if is_missing_image(image_url):
                logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: –Ω–∞–π–¥–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞...")
                continue  
            
            logger.debug(f"–í—ã–±—Ä–∞–Ω–æ –∞–Ω–∏–º–µ: ID={random_anime['id']}, –ù–∞–∑–≤–∞–Ω–∏–µ={anime_title}, –ö–∞—Ä—Ç–∏–Ω–∫–∞={image_url}")
            
            with open(VIDEO_TITLES_FILE, "r", encoding="utf-8") as file:
                video_titles = file.readlines()
            
            random_title = random.choice(video_titles).strip()
            logger.debug(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {random_title}")
            
            response = requests.get(image_url, headers=headers)
            img_data = Image.open(BytesIO(response.content))
            img_data = img_data.resize((300, 450), Image.LANCZOS)
            img_filename = f"anime_{random.randint(1000, 9999)}.jpg"
            img_data.save(img_filename)

            caption = f"{escape_markdown(random_title)}\n||[{escape_markdown(anime_title)}]({anime_url})||"
            return img_filename, caption, random_anime['id']

        logger.debug("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return None, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", ""

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return None, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", ""

@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(Command("anime"))
@dp.message(F.text.lower() == "–∞–Ω–∏–º–µ")
async def anime_button_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    user_tag = f"@{message.from_user.username}" if message.from_user.username else "–ù–µ—Ç username"

    add_user(user_id, username, user_tag)

    img_path, caption, anime_id = await fetch_data()

    if img_path:
        sent_message = await message.answer_photo(photo=FSInputFile(img_path), caption=caption, parse_mode="MarkdownV2")
        os.remove(img_path)
        add_stat(user_id, anime_id, caption.split("\n")[0].replace("\\", ""), sent_message.message_id, message.chat.id)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")

@dp.message(Command("history"))
async def history_command(message: Message):
    user_id = message.from_user.id
    stats = get_user_stats(user_id)

    if not stats:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return

    history_text = "üìú *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n"
    for record in stats[:10]:
        date, anime_id, title = record[1], record[3], record[4]
        history_text += f"üìÖ {date} | üé¨ {title} (ID: {anime_id})\n"

    await message.answer(history_text, parse_mode="Markdown")


@dp.message(Command("stats"))
async def stats_command(message: Message):
    # user_id = message.from_user.id
    
    # if not has_permission(user_id, "stats"):
    #     await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    #     return

    stats = get_all_user_stats()
    if not stats:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–æ—Å–∞—Ö.")
        return

    sorted_stats = sorted(stats, key=lambda x: x[1], reverse=True)
    stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:*\n\n"
    for user_tag, count in sorted_stats:
        stats_text += f"{user_tag} - {count}\n"
    
    await message.answer(stats_text, parse_mode="Markdown")

@dp.message(Command("get_permissions"))
async def get_permissions_command(message: Message):
    user_id = message.from_user.id
    code = str(random.randint(100000, 999999))
    pending_codes[user_id] = code
    logger.info(f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è {user_id}: {code}")
    await message.answer("üîë –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª—å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞.")

@dp.message()
async def confirm_permission(message: Message):
    user_id = message.from_user.id
    
    if user_id not in pending_codes:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    
    if message.text == pending_codes[user_id]:
        add_user_permission(user_id, "stats")
        del pending_codes[user_id]
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /stats –ø–æ–ª—É—á–µ–Ω!")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def main():
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
